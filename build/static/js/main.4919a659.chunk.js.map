{"version":3,"sources":["components/Toast.tsx","pages/AddMessage.tsx","pages/Home.tsx","components/Menu.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Alert","props","elevation","variant","Toast","text","severity","visible","React","useState","open","setOpen","useEffect","handleClose","event","reason","Snackbar","autoHideDuration","onClose","AddMessage","setVisible","ADD_MSG","gql","useMutation","addMsg","msgInput","setMsgInput","Container","maxWidth","onSubmit","preventDefault","variables","msg","then","TextField","label","multiline","onChange","e","target","value","Button","color","type","GET_MESSAGES","Home","document","body","style","backgroundColor","css","useFela","width","setWidth","height","setHeight","window","innerWidth","innerHeight","useQuery","loading","error","data","stories","messages","map","content","action","isPaused","className","font","fontWeight","lineHeight","margin","padding","textAlign","textTransform","fontSize","background","Math","random","toString","substr","message","defaultInterval","loop","keyboardNavigation","Menu","anchorEl","setAnchorEl","position","zIndex","right","IconButton","aria-label","aria-controls","aria-haspopup","onClick","currentTarget","id","keepMounted","Boolean","to","MenuItem","App","renderer","createRenderer","link","createHttpLink","uri","process","headers","console","log","client","ApolloClient","cache","InMemoryCache","RendererProvider","path","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4919a659.chunk.js","sourcesContent":["import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Toast({text, severity, visible}) {\n  const [open, setOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    setOpen(visible);\n  }, [visible]);\n\n    const handleClose = (event, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n  \n      setOpen(false);\n    };\n\n  return <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n  <Alert severity={severity} onClose={handleClose}>\n    {text}\n  </Alert>\n</Snackbar>;\n}\n\nexport default Toast;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport { gql, useMutation } from \"@apollo/client\";\nimport Toast from '../components/Toast';\n\n\n\nfunction AddMessage() {\n  const [visible, setVisible] = React.useState(false);\n const ADD_MSG = gql`\n   mutation($msg: String!) {\n    insert_messages_one(object: {message: $msg, user_id: 1}) {\n      id\n      created_at\n    }\n  }\n `;\n const [addMsg] = useMutation(ADD_MSG);\n const [msgInput, setMsgInput] = React.useState('');\n\n \n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    addMsg({variables: {msg: msgInput }}).then(() => {\n      return setVisible(true);\n    });\n  };\n\n  return <Container maxWidth=\"sm\">\n    <h2>Neuer Bewusstseinsspruch</h2>\n    <form onSubmit={handleSubmit}>\n      <TextField\n        label=\"Spruch\"\n        multiline\n        variant=\"filled\"\n        onChange={e => (setMsgInput(e.target.value))}\n      />\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n      Speichern\n      </Button>\n    </form>\n    <Toast text=\"Gespeichert!\" severity=\"success\" visible={visible}></Toast>\n\n  </Container>;\n}\n\nexport default AddMessage;","import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { useFela } from 'react-fela';\nimport Stories from 'react-insta-stories';\n\nconst GET_MESSAGES = gql`\n  query MyQuery {\n    messages(order_by: {created_at: desc}, where: {created_at: {_gt: \\\"2021-01-10\\\"}}) {\n      id\n      message\n      updated_at\n      user_id\n      created_at\n    }\n  }\n`;\n\nfunction Home() {\n  document.body.style.backgroundColor = \"skyblue\";\n  const { css } = useFela();\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n\n  React.useEffect(() => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  });\n\n  const { loading, error, data } = useQuery(GET_MESSAGES);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const stories = data.messages.map(msg => {\n    return {\n      content: ({ action, isPaused }) => {\n        return <div className={css({\n          font: \"18px Arial Black, sans-serif\",\n          fontWeight: 900,\n          lineHeight: \"28px\",\n          margin: 0,\n          padding: \"40vh 40px 0 40px\",\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          width: '100%',\n          fontSize: '5vw',\n          //background: 'Aquamarine', \n          background: '#'+Math.random().toString(16).substr(-6), \n          color: '#16161d'\n        })}>\n          {msg.message}\n        </div>\n      }\n    };\n  });\n\n\n  return <Stories\n      stories={stories}\n      defaultInterval={8000}\n      loop={true}\n      keyboardNavigation\n      width={width}\n      height={height}\n    />;\n\n  return <div className={css({\n\t  font: \"18px Arial Black, sans-serif\",\n\t  fontWeight: 900,\n    lineHeight: \"28px\",\n    margin: 0,\n    padding: \"40vh 40px 0 40px\",\n    color: \"#fff\",\n    textAlign: \"center\",\n    textTransform: \"uppercase\"\n  })}>{data.messages && data.messages.length > 0 && data.messages[0].message}</div>;\n}\n\nexport default Home;","import React from 'react';\n\nimport {Link} from \"react-router-dom\";\nimport {default as MenuUI} from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { useFela } from 'react-fela';\n\nfunction Menu() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const { css } = useFela();\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return <div className={css({\n    position: 'fixed',\n    zIndex: 2000,\n    right: 0\n  })}>\n    <IconButton\n        aria-label=\"more\"\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n    </IconButton>\n    <MenuUI\n      id=\"simple-menu\"\n      anchorEl={anchorEl}\n      keepMounted\n      open={Boolean(anchorEl)}\n      onClose={handleClose}\n    >\n      <Link to=\"/\"><MenuItem>Home</MenuItem></Link>\n      <Link to=\"/add\"><MenuItem>Neuer Bewusstseinsspruch</MenuItem></Link>\n    </MenuUI>\n  </div>;\n}\n\nexport default Menu;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport AddMessage from './pages/AddMessage';\nimport Home from './pages/Home';\nimport { createRenderer } from 'fela'\nimport { RendererProvider } from 'react-fela'\nimport Menu from './components/Menu';\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\n\nfunction App() {\n  const renderer = createRenderer();\n\n  const headers = {\n    'x-hasura-admin-secret': process.env.REACT_APP_GRAPHQL_SECRET\n  };\n  const link = createHttpLink({\n    uri: process.env.REACT_APP_GRAPHQL_HTTP,\n    headers\n  });\n  console.log(process.env.REACT_APP_GRAPHQL_HTTP)\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link\n  });\n  return (\n    <RendererProvider renderer={renderer}>\n      <ApolloProvider client={client}>\n        <Router>\n          <div>\n            <Menu />\n\n            <Switch>\n              <Route path=\"/add\">\n                <AddMessage />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </ApolloProvider>\n    </RendererProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nrequire('typeface-roboto')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}